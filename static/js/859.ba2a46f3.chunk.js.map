{"version":3,"file":"static/js/859.ba2a46f3.chunk.js","mappings":"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","sources":["redux/repos/repos-selectors.js","components/ReposList/RepoCard.Styled.js","components/ReposList/RepoCard.jsx","components/ReposList/ReposList.jsx","components/ReposPagination/ReposPagination.jsx","components/ReposSearchForm/ReposSearchForm.jsx","pages/Search/Search.jsx"],"sourcesContent":["export const getRepos = state => state.repos.repos;\nexport const getIsLoading = state => state.repos.isLoading;\nexport const getError = state => state.repos.error;\nexport const getSearchQuery = state => state.repos.searchQuery;\nexport const getPerPage = state => state.repos.perPage;\nexport const getSort = state => state.repos.sort;\nexport const getOrder = state => state.repos.order;\n","export const typographyStyle = isCardClicked => ({\n  textOverflow: isCardClicked ? 'ellipsis' : 'unset',\n  whiteSpace: isCardClicked ? 'nowrap' : 'unset',\n  overflow: isCardClicked ? 'hidden' : 'unset',\n});\n","import { useState } from 'react';\nimport {\n  Box,\n  Button,\n  Card,\n  CardActionArea,\n  CardActions,\n  CardContent,\n  Typography,\n} from '@mui/material';\nimport { typographyStyle } from './RepoCard.Styled';\n\nimport { Link } from 'react-router-dom';\n\nexport const RepoCard = ({ item }) => {\n  const [isCardClicked, setIsCardClicked] = useState(true);\n\n  const handleCardClick = () => {\n    setIsCardClicked(!isCardClicked);\n  };\n\n  const handleLearnMoreClick = () => {\n    window.open(item.html_url, '_blank');\n  };\n\n  return (\n    <Card sx={{ minWidth: 275 }}>\n      <CardActionArea onClick={handleCardClick}>\n        <CardContent>\n          <Typography sx={typographyStyle}>Name: {item.name}</Typography>\n          <Typography sx={typographyStyle}>\n            Created on {item.created_at}\n          </Typography>\n          <Typography sx={typographyStyle}>\n            Language: {item.language}\n          </Typography>\n          <Typography sx={typographyStyle}>\n            Description: {item.description}\n          </Typography>\n          <Typography sx={typographyStyle}>\n            Forks: {item.forks_count}\n          </Typography>\n          <Typography sx={typographyStyle}>\n            Watchers: {item.watchers}\n          </Typography>\n          <Typography sx={typographyStyle}>\n            Visibility: {item.visibility}\n          </Typography>\n          {!isCardClicked && (\n            <Box sx={{ width: '40px' }}>\n              <img src={item.owner.avatar_url} alt=\"user_avatar\" width=\"100%\" />\n            </Box>\n          )}\n          <Box\n            component={Link}\n            to={item.owner.html_url}\n            target=\"blank\"\n            rel=\"noopener noreferrer\"\n            color=\"inherit\"\n          >\n            <Typography sx={typographyStyle}>\n              Owner: {item.owner.login}\n            </Typography>\n          </Box>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button size=\"small\" onClick={handleLearnMoreClick} variant=\"outlined\">\n          Check It\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n","import { Grid, Typography } from '@mui/material';\n\nimport { useSelector } from 'react-redux';\n\nimport { getRepos } from 'redux/repos/repos-selectors';\nimport { RepoCard } from './RepoCard';\n\nexport const ReposList = () => {\n  const repos = useSelector(getRepos);\n  const { items } = repos;\n\n  return (\n    <>\n      <Typography variant=\"h3\" component=\"h2\">\n        List of repos\n      </Typography>\n      <Grid container spacing={2}>\n        {items &&\n          items.map(item => (\n            <Grid item key={item.id} xs={12} sm={6} md={4}>\n              <RepoCard item={item} />\n            </Grid>\n          ))}\n      </Grid>\n    </>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { Box, Pagination, useTheme } from '@mui/material';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchGetRepos } from 'redux/repos/repos-operations';\nimport {\n  getPerPage,\n  getRepos,\n  getSearchQuery,\n} from 'redux/repos/repos-selectors';\n\nexport const ReposPagination = () => {\n  const dispatch = useDispatch();\n  const theme = useTheme();\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [numberOfPages, setNumberOfPages] = useState(0);\n\n  const searchQuery = useSelector(getSearchQuery);\n  const perPage = useSelector(getPerPage);\n  const repos = useSelector(getRepos);\n\n  useEffect(() => {\n    if (repos) {\n      const { total_count: numberOfRepos } = repos;\n      setNumberOfPages(Math.ceil(numberOfRepos / perPage));\n    }\n  }, [repos, perPage]);\n\n  const handlePageChange = (event, value) => {\n    setCurrentPage(value);\n    dispatch(\n      fetchGetRepos({ repoName: searchQuery, page: value, perPage: perPage })\n    );\n  };\n\n  return (\n    <>\n      {numberOfPages > 0 && (\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'center',\n            margin: theme.spacing(2),\n          }}\n        >\n          <Pagination\n            count={numberOfPages}\n            variant=\"outlined\"\n            onChange={handlePageChange}\n            page={currentPage}\n          />\n        </Box>\n      )}\n    </>\n  );\n};\n","import { useTheme } from '@mui/material';\nimport {\n  Box,\n  Button,\n  CircularProgress,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n} from '@mui/material';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\n\nimport {\n  getIsLoading,\n  getOrder,\n  getPerPage,\n  getSearchQuery,\n  getSort,\n} from 'redux/repos/repos-selectors';\nimport { fetchGetRepos } from 'redux/repos/repos-operations';\nimport {\n  setPerPage,\n  setSearchQuery,\n  setSort,\n  setOrder,\n} from 'redux/repos/repos-slice';\n\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\nconst validationSchema = yup.object({\n  query: yup.string('Enter Name to Search').required('Name is Required'),\n  perPage: yup.number('Enter Repos per Page'),\n  sort: yup.string('Choose Sort Order'),\n  order: yup.string('Choose Order'),\n});\n\nexport const ReposSearchForm = () => {\n  const dispatch = useDispatch();\n  const theme = useTheme();\n\n  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);\n\n  const isLoading = useSelector(getIsLoading);\n  const searchQuery = useSelector(getSearchQuery);\n  const perPage = useSelector(getPerPage);\n  const sort = useSelector(getSort);\n  const order = useSelector(getOrder);\n\n  const formik = useFormik({\n    initialValues: {\n      query: searchQuery,\n      perPage: perPage,\n      sort: sort,\n      order: order,\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      const repoName = {\n        repoName: values.query,\n        perPage: values.perPage,\n        sort: values.sort,\n        order: values.order,\n      };\n      dispatch(fetchGetRepos(repoName));\n      dispatch(setSearchQuery(values.query));\n      dispatch(setPerPage(values.perPage));\n      dispatch(setSort(values.sort));\n      dispatch(setOrder(values.order));\n    },\n  });\n\n  const handleToggleAdvancedOptions = () => {\n    setShowAdvancedOptions(!showAdvancedOptions);\n  };\n\n  return (\n    <>\n      <Box\n        component=\"form\"\n        onSubmit={formik.handleSubmit}\n        sx={{\n          gap: 1,\n        }}\n      >\n        <TextField\n          sx={{ marginBottom: theme.spacing(1) }}\n          fullWidth\n          id=\"query\"\n          name=\"query\"\n          label=\"What do you want to find?\"\n          value={formik.values.query}\n          onChange={formik.handleChange}\n          error={formik.touched.query && Boolean(formik.errors.query)}\n          helperText={formik.touched.query && formik.errors.query}\n        />\n        <Button\n          fullWidth\n          variant=\"contained\"\n          onClick={handleToggleAdvancedOptions}\n          sx={{ marginBottom: theme.spacing(1) }}\n        >\n          {showAdvancedOptions\n            ? 'Hide advanced options'\n            : 'Show advanced options'}\n        </Button>\n        {showAdvancedOptions && (\n          <TextField\n            sx={{ marginBottom: theme.spacing(1) }}\n            fullWidth\n            id=\"perPage\"\n            name=\"perPage\"\n            label=\"Repos per Page\"\n            value={formik.values.perPage}\n            onChange={formik.handleChange}\n            error={formik.touched.perPage && Boolean(formik.errors.perPage)}\n            helperText={formik.touched.perPage && formik.errors.perPage}\n          />\n        )}\n        {showAdvancedOptions && (\n          <FormControl fullWidth sx={{ marginBottom: theme.spacing(1) }}>\n            <InputLabel id=\"sort-label\">Sort Order</InputLabel>\n            <Select\n              labelId=\"sort-label\"\n              id=\"sort\"\n              name=\"sort\"\n              value={formik.values.sort}\n              onChange={formik.handleChange}\n              error={formik.touched.sort && Boolean(formik.errors.sort)}\n            >\n              <MenuItem value={'best-match'}>Best Match</MenuItem>\n              <MenuItem value={'stars'}>Stars</MenuItem>\n              <MenuItem value={'forks'}>Forks</MenuItem>\n              <MenuItem value={'updated'}>Updated</MenuItem>\n              <MenuItem value={'help-wanted-issues'}>\n                Help Wanted Issues\n              </MenuItem>\n            </Select>\n          </FormControl>\n        )}{' '}\n        {showAdvancedOptions && (\n          <FormControl fullWidth sx={{ marginBottom: theme.spacing(1) }}>\n            <InputLabel id=\"order-label\">Order</InputLabel>\n            <Select\n              labelId=\"order-label\"\n              id=\"order\"\n              name=\"order\"\n              value={formik.values.order}\n              onChange={formik.handleChange}\n              error={formik.touched.order && Boolean(formik.errors.order)}\n            >\n              <MenuItem value={'asc'}>Ascending</MenuItem>\n              <MenuItem value={'desc'}>Descending</MenuItem>\n            </Select>\n          </FormControl>\n        )}\n        <Button\n          fullWidth\n          sx={{ marginBottom: theme.spacing(1) }}\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={isLoading}\n          type=\"submit\"\n        >\n          {isLoading ? <CircularProgress size={24} /> : 'Search'}\n        </Button>\n      </Box>\n    </>\n  );\n};\n","import { Container, Typography } from '@mui/material';\n\nimport { ReposList } from 'components/ReposList/ReposList';\nimport { ReposPagination } from 'components/ReposPagination/ReposPagination';\nimport { ReposSearchForm } from 'components/ReposSearchForm/ReposSearchForm';\n\nconst Search = () => {\n  return (\n    <>\n      <Container>\n        <Typography variant=\"h2\" component=\"h1\" mb>\n          Github Repo Search Page.\n        </Typography>\n        <ReposSearchForm />\n        <ReposList />\n        <ReposPagination />\n      </Container>\n    </>\n  );\n};\n\nexport default Search;\n"],"names":["getRepos","state","repos","getIsLoading","isLoading","getSearchQuery","searchQuery","getPerPage","perPage","getSort","sort","getOrder","order","typographyStyle","isCardClicked","textOverflow","whiteSpace","overflow","RepoCard","item","useState","setIsCardClicked","Card","sx","minWidth","CardActionArea","onClick","CardContent","Typography","name","created_at","language","description","forks_count","watchers","visibility","Box","width","src","owner","avatar_url","alt","component","Link","to","html_url","target","rel","color","login","CardActions","Button","size","window","open","variant","ReposList","items","useSelector","Grid","container","spacing","map","xs","sm","md","id","ReposPagination","dispatch","useDispatch","theme","useTheme","currentPage","setCurrentPage","numberOfPages","setNumberOfPages","useEffect","numberOfRepos","total_count","Math","ceil","display","justifyContent","margin","Pagination","count","onChange","event","value","fetchGetRepos","repoName","page","validationSchema","yup","query","required","ReposSearchForm","showAdvancedOptions","setShowAdvancedOptions","formik","useFormik","initialValues","onSubmit","values","setSearchQuery","setPerPage","setSort","setOrder","handleSubmit","gap","TextField","marginBottom","fullWidth","label","handleChange","error","touched","Boolean","errors","helperText","FormControl","InputLabel","Select","labelId","MenuItem","disabled","type","CircularProgress","Container","mb"],"sourceRoot":""}